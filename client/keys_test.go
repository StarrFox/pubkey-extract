package client

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
)

var keyBuf = must(hex.DecodeString("5201024fc54d6a8f4e5a0b16a709c7cd3169b098924fc1030768d7b90b0b05192f95ab24018dfa6ccc541900572cc02fe555e9a19d26b5caa6965eade108cce2caa766849a6e68f2e834a45a84d0ff3f27f91905d01792f40c848eb7a6a3eab1a3df1de4f3f7305f11e2de7b804e242851a974e41f919a277bf3e262754b7615f1b916a535587ace72faeb96714356256dc9be1456373325db6dcc87e4b393d28cf95585d1bad3b285389b63418d670b87886788585c3ec23b197b6c13c8034a17a9db50f59ad2907caeb901d007e2f022241a87a6f9755ddbf85e9e2c5c101d44f803e96126c220e5e4de4cf76c8c25fdc5900c08fd924e31e3d552aae7105b0e7c59c009fc75d830d63a5dba74d038fb6cc873fc05b77ea0a625f9b8844d77735c2a6951258816f60eee1d9ac81212b243f81f5d97c0bdf1a96dbb84d8c8a130146667d9d075d9d02cc7106e4dea2bfad114abe2520103c0dac66161f38ed6141224013009f401a575731dc3e20b37369b433d4a00d48e24014c7faaee0e2e7bdb23dc7486c3917a6ffdf9eb3900d4f9c4364856557ed8d5335c4aaec29ee56ae435cc08feb34dea54334b8ae5884fbd44da14862f3845c79ab54097bfdf7ce1fffd37e97becc62acaa4eaf2a9d59c06910f2e226673e8416918a4a3d0e0be1f6152ffc069adf444c0cd28c2d6a58941d177098536f4ebc746539b882f7b270920d366119c4cf7e0e49c1e7b4333aa832532751e9cf9c07dff12743b5c3af01016644f030cc4d1210deae13ae3b2448993411314365e3f0015247d7656ccd5b3d597b4dac4f4f4f53c04908498f965149ca4188dfb799adc79362e367914cc60b704923578d0a3548423f303c9b43f635d9ee61dc0ef2a080ed6a058b09623d90520bb7e393fc1f4fafa22d97a88c3fc20dcd3bf74186eeb1fc8acc688edcb262589366d0380439191520103be8e940a8e63758a5a604e430f1736cac9a38cb650eb96b04b68b94a0e2ae92a2401037634d955a5790e845e1ea6e270ff80afc39976a4ac581a07e3e7082a1d503af7603db55c380798a7316d702f6f7a6af97096ff73ea3b96a02bd59741a2cbfa04bd7292fbde5f31be7ca6b0c3ddf291dbac797c30ecd4a684ce058ae37c183909cb4d554db580e033132f583e523a26bea37c889d10ad733dfb2731a7caec7729206661594db41fa9168d49269a5260a094f3a5cc98ffd56d7b45a8f28f5d16e166c79777d64f776ad9004ab183599b169879e3416033481920aa9195be6fc9901ae59469864105a44c5b2dd66392693fc2fcd4554af17c02bc7f34bdeee604e8b4cf2453cb126a821a7209620e647ddd762f86e61b78774b9151dc4cbafa6311b167789e2aea07f6d8526aef273d1f0552fad0492670e08eb0aefc2e057ce178f706b75680f9e87d4d8ce531c241b45201052a9233f2f7004fbcbe785dd8440660453cb359b02b799f4fa6d990f91418a48624019fba0c0cc89e9c2248e43d204cf3488ed0aabdd6af5f9882e707f1468474ec129afc24c07004badd6340169f8947552efed95f27c0bac2d8684ebcbf4685c98179ffcccdba60d3d868813a1764716a02b9adc457afa733d656165d24bc651a856a051541f76645aa11b56e7c748fc817b4c2b25044f04aca91da005e81b072a471863d24558ac0d5094dd1f338cb2ee2e169f623cb8d778744c0de3bd7fc3e986ea63090d6138db0baf7f0af4e6ae190916879f9dcc9e4704433386f4105cd3b3c53ba2a70502f2bba223dd6bc5cbca78360590dbfc38ae8290c844e09ccba927cd8177c328989987b54763c8c6fa3a242b2c85fbaa3ae6c75dbd5093940107c8d87599f9c38c25903583e28c9501626ad2493608998a7120af80a7709b3092dd7c305457462cf8aa5a18afcbd2793353e0101a2b78c1ff8c5d0fd01f49a427532b4d0f4519f7e2401b0ed86223382ee4d81d16c04f2ed3d7a519b56c557f3577f2095eefc27c43ee2d1dfd00e4b3b446c87c71e4f7e069544ffb89cba0e49c9e3e748f3d5e045ee8d1afd950ef087a7f528336153a36fdbee97d634eea0a97ef84bf43dc7165b2275fabd644e7e02d669a78f31fcc7689ab1b087b1a0af3d783c39862e5fbd22338ef82fc0526b8c0af129e936e3877022d26b0fdffccf8cd76e65810bd074c3eb75b2c307317ddab14cb27a307f0584f0df29f3365f4548ca103ae1e2f95b40fde7857f79617ad8af64cc7aabe084e6f974b6675e3818511049122ac8db4d3f75237f009319fca9b0fa18865b86c5539595fb73919b2df7ea30077e80daef10f3e4d27a6d7c3992da0e0d6a09e00c3a1c1bab9313e375f79149da3fb2768df97fdb52d797e473d78240"))

func must[T any](v T, e error) T {
	if e != nil {
		panic(e)
	}

	return v
}

func TestKeysUmmarshalBinary(t *testing.T) {
	keys := make(Keys, keyCount)
	err := keys.UnmarshalBinary(keyBuf)
	assert.Nil(t, err)

	assert.Equal(t, "ARIA", keys[0].Cipher)
	assert.Equal(t, "CAMELLIA", keys[1].Cipher)
	assert.Equal(t, "CAMELLIA", keys[2].Cipher)
	assert.Equal(t, "LEA", keys[3].Cipher)
	assert.Equal(t, "SPECK_64", keys[4].Cipher)

	assert.Equal(t, 5, keys[0].Operand)
	assert.Equal(t, 92, keys[1].Operand)
	assert.Equal(t, 228, keys[2].Operand)
	assert.Equal(t, 66, keys[3].Operand)
	assert.Equal(t, 181, keys[4].Operand)
}

func TestKeysMarshalBinaryLength(t *testing.T) {
	keys := make(Keys, keyCount)
	err := keys.UnmarshalBinary(keyBuf)
	assert.Nil(t, err)

	buf, err := keys.MarshalBinary()
	assert.Nil(t, err)
	assert.Equal(t, len(keyBuf), len(buf))
}

func TestKeysMarshalBinary(t *testing.T) {
	keysA := make(Keys, keyCount)
	err := keysA.UnmarshalBinary(keyBuf)
	assert.Nil(t, err)

	buf, err := keysA.MarshalBinary()
	assert.Nil(t, err)

	keysB := make(Keys, keyCount)
	err = keysB.UnmarshalBinary(buf)
	assert.Nil(t, err)

	assert.Equal(t, keysA, keysB)
}
